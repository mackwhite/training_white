---
title: "Data Visualization"
author: "Mack White"
format: html
---

## Setup
```{r}
#| echo: false
#| warning: false
#| message: false
library(readr)
library(dplyr)
library(tidyr)
library(forcats) # makes working with factors easier
library(ggplot2)
library(leaflet) # interactive maps
library(DT) # interactive tables
library(scales) # scale functions for visualization
library(janitor) # expedite cleaning and exploring data
library(viridis) # colorblind friendly color pallet
```

## Read Data

```{r}
delta_visits_raw <- read_csv("https://portal.edirepository.org/nis/dataviewer?packageid=edi.587.1&entityid=cda8c1384af0089b506d51ad8507641f")
```

## Explore Data

```{r}
colnames(delta_visits_raw)
```

### `janitor::clean_names()` is an awesome function to transform all column names into the same format. The default format for this function is snake_case_format. We highly recommend having clear well formatted column names. It makes your life easier down the line.

```{r}
delta_visits <- delta_visits_raw %>% 
    janitor::clean_names()
colnames(delta_visits)
glimpse(delta_visits)
```

```{r}
range(delta_visits$date)
```

## Looking at data using `view()` function - see it is now tidy! Make it tidy below (i.e., cleaning and organizing data):

```{r}
visit_long <- delta_visits %>% 
  pivot_longer(cols = c("sm_boat", "med_boat", "lrg_boat", "bank_angler", "scientist", "cars"), # selecting visitor types
               names_to = "visitor_type", # renaming new column as such and below adding new column to hold all of these data points/values
               values_to = "quantity") %>% 
  rename(restore_loc = eco_restore_approximate_location) %>% 
    select(-notes)
```

## Calculating Daily Visits by Location

```{r}
daily_visits_loc <- visit_long %>% 
  group_by(restore_loc, date, visitor_type) %>% 
  summarize(daily_visits = sum(quantity))
```

## Plotting Daily Visits by Location with `ggplot2::` package

```{r}
## Option 1 - data and mapping called in the ggplot() function
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, y = daily_visits))+
    geom_col()


# ## Option 2 - data called in ggplot function; mapping called in geom
# ggplot(data = daily_visits_loc) +
#     geom_col(aes(x = restore_loc, y = daily_visits))
# 
# 
# ## Option 3 - data and mapping called in geom
# ggplot() +
#     geom_col(data = daily_visits_loc,
#              aes(x = restore_loc, y = daily_visits))
# 
# ## each of these ways lead us to the same result!
```

## Choosing a different `geom()` and piping information in to plot

```{r}
daily_visits_loc %>% 
  separate(date, c("year", "month", "day"),
           sep = "-") %>% 
  filter(daily_visits < 30,
         visitor_type %in% c("sm_boat", "med_boat", "lrg_boat")) %>% 
  ggplot(aes(x = visitor_type,
             y = daily_visits)) + 
  geom_boxplot()
```

## Customizing Plot

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, 
           y = daily_visits,
           fill = "blue")) +
    geom_col()
```

### when we do things inside `aes()` function, looks for data inside df - why even though we ask for blue, it draws as red... fixed below:

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, 
           y = daily_visits)) +
    geom_col(fill = "blue")
```

## Color by variable type

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, 
           y = daily_visits,
           fill = visitor_type)) +
    geom_col()
```

## Building from themes eg

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, 
           y = daily_visits,
           fill = visitor_type)) +
    geom_col() +
  labs(x = "Restoration Locations",
       y = "Number of Visits",
       fill = "Type of Visitors",
       title = "Total Visits to Restoration Sites",
       subtitle = "sum of daily visits during study period") +
  coord_flip() +
  theme_bw() +
  theme(legend.position = "bottom",
        axis.ticks.y = element_blank()) +
  scale_y_continuous(breaks = seq(0, 120, 20))

# you can save theme as an object and just insert as layer - eg below:

# my_theme <- theme_bw(base_size = 16) +
#     theme(legend.position = "bottom",
#           axis.ticks.y = element_blank())
# 
# ggplot(data = daily_visits_loc,
#        aes(x = restore_loc, y = daily_visits,
#            fill = visitor_type))+
#     geom_col()+
#     labs(x = "Restoration Location",
#          y = "Number of Visits",
#          fill = "Type of Visitor",
#          title = "Total Number of Visits to Delta Restoration Areas by visitor type",
#          subtitle = "Sum of all visits during study period")+
#     coord_flip()+
#     my_theme
```

## Looking at Colors

```{r}
ggplot(data = daily_visits_loc,
       aes(x = restore_loc, 
           y = daily_visits,
           fill = visitor_type)) +
    geom_col() +
  labs(x = "Restoration Locations",
       y = "Number of Visits",
       fill = "Type of Visitors",
       title = "Total Visits to Restoration Sites",
       subtitle = "sum of daily visits during study period") +
  coord_flip() +
  theme_bw() +
  theme(legend.position = "bottom",
        axis.ticks.y = element_blank()) +
  scale_y_continuous(breaks = seq(0, 120, 20)) + 
  scale_fill_viridis_d() # color-blind friendly

## saving plot - default is to save last plot that we ran in script
ggsave("../plots/visits_restore_loc_delta.png",
       width = 12,
       height = 6,
       units = "in")
```

## Facet Plots

```{r}
facet_plot <- ggplot(data = daily_visits_loc,
       aes(x = visitor_type, y = daily_visits,
           fill = visitor_type))+
    geom_col()+
    theme_bw()+
    facet_wrap(~restore_loc,
               scales = "free_y",
               ncol = 5,
               nrow = 2)+
    scale_fill_viridis_d()+
    labs(x = "Type of visitor",
         y = "Number of Visits",
         title = "Total Number of Visits to Delta Restoration Areas",
         subtitle = "Sum of all visits during study period")+
    theme_bw()+
    theme(legend.position = "bottom",
          axis.ticks.x = element_blank(),
          axis.text.x = element_blank())

facet_plot
```

## Interactive Visualizations
### `DT` Package for interactive tables
```{r}
locations <- visit_long %>%
    distinct(restore_loc, .keep_all = T) %>%
    select(restore_loc, latitude, longitude)

head(locations)
```

```{r}
datatable(locations)
```

### `leaflet` Package for interactive maps
```{r}
leaflet(locations) %>% #calling dataset
  addTiles() %>% 
  addMarkers(lng = ~longitude, 
             lat = ~latitude,
             popup = ~restore_loc)
```

### Advanced Interactive Map
```{r}
leaflet(locations) %>%
    addWMSTiles(
        "https://basemap.nationalmap.gov/arcgis/services/USGSTopo/MapServer/WmsServer",
        layers = "0",
        options = WMSTileOptions(format = "image/png", transparent = TRUE)) %>%
    addCircleMarkers(
        lng = ~ longitude,
        lat = ~ latitude,
        popup = ~ restore_loc,
        radius = 5,
        # set fill properties
        fillColor = "salmon",
        fillOpacity = 1,
        # set stroke properties
        stroke = T,
        weight = 0.5,
        color = "white",
        opacity = 1)
```

## Another Leaflet Example!

```{r}
leaflet(locations) %>%
    addWMSTiles(
        "https://basemap.nationalmap.gov/arcgis/services/USGSImageryTopo/MapServer/WmsServer",
        layers = "0",
        options = WMSTileOptions(format = "image/png", transparent = TRUE)) %>%
    addWMSTiles(
        "https://basemap.nationalmap.gov/arcgis/services/USGSHydroCached/MapServer/WmsServer",
        layers = "0",
        options = WMSTileOptions(format = "image/png", transparent = TRUE)) %>%
    addCircleMarkers(
        lng = ~ longitude,
        lat = ~ latitude,
        popup = ~ restore_loc,
        radius = 5,
        # set fill properties
        fillColor = "salmon",
        fillOpacity = 1,
        # set stroke properties
        stroke = T,
        weight = 0.5,
        color = "white",
        opacity = 1)
```

